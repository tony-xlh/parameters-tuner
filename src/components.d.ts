/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ImageprocessingParameterDef } from "./components/parameters-modes/definition";
export namespace Components {
    interface BarcodeFormats {
        /**
          * Update checked barcode formats with an object like the following: {   "BarcodeFormatIds": [     "BF_EAN_13"   ],   "BarcodeFormatIds_2": [     "BF2_POSTALCODE"   ], }
         */
        "loadSettings": (settings: any) => Promise<void>;
        /**
          * Output checked barcode formats to an object like the following: {   "BarcodeFormatIds": [     "BF_EAN_13"   ],   "BarcodeFormatIds_2": [     "BF2_POSTALCODE"   ], }
         */
        "outputSettings": () => Promise<any>;
    }
    interface GeneralSettings {
        "loadSettings": (settings: any) => Promise<void>;
        "outputSettings": () => Promise<any>;
    }
    interface ParametersModes {
        "loadExternalDefinition": (defs: ImageprocessingParameterDef[]) => Promise<void>;
        "loadSettings": (params: any) => Promise<void>;
        "outputSettings": () => Promise<{}>;
    }
}
export interface BarcodeFormatsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBarcodeFormatsElement;
}
export interface GeneralSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeneralSettingsElement;
}
export interface ParametersModesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLParametersModesElement;
}
declare global {
    interface HTMLBarcodeFormatsElement extends Components.BarcodeFormats, HTMLStencilElement {
    }
    var HTMLBarcodeFormatsElement: {
        prototype: HTMLBarcodeFormatsElement;
        new (): HTMLBarcodeFormatsElement;
    };
    interface HTMLGeneralSettingsElement extends Components.GeneralSettings, HTMLStencilElement {
    }
    var HTMLGeneralSettingsElement: {
        prototype: HTMLGeneralSettingsElement;
        new (): HTMLGeneralSettingsElement;
    };
    interface HTMLParametersModesElement extends Components.ParametersModes, HTMLStencilElement {
    }
    var HTMLParametersModesElement: {
        prototype: HTMLParametersModesElement;
        new (): HTMLParametersModesElement;
    };
    interface HTMLElementTagNameMap {
        "barcode-formats": HTMLBarcodeFormatsElement;
        "general-settings": HTMLGeneralSettingsElement;
        "parameters-modes": HTMLParametersModesElement;
    }
}
declare namespace LocalJSX {
    interface BarcodeFormats {
        "onUpdated"?: (event: BarcodeFormatsCustomEvent<void>) => void;
    }
    interface GeneralSettings {
        "onUpdated"?: (event: GeneralSettingsCustomEvent<void>) => void;
    }
    interface ParametersModes {
        "onUpdated"?: (event: ParametersModesCustomEvent<void>) => void;
    }
    interface IntrinsicElements {
        "barcode-formats": BarcodeFormats;
        "general-settings": GeneralSettings;
        "parameters-modes": ParametersModes;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "barcode-formats": LocalJSX.BarcodeFormats & JSXBase.HTMLAttributes<HTMLBarcodeFormatsElement>;
            "general-settings": LocalJSX.GeneralSettings & JSXBase.HTMLAttributes<HTMLGeneralSettingsElement>;
            "parameters-modes": LocalJSX.ParametersModes & JSXBase.HTMLAttributes<HTMLParametersModesElement>;
        }
    }
}
